{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohamadhasan tabrizi\\\\Desktop\\\\capitalnext\\\\pages\\\\signal\\\\[signalId].js\";\nimport { useRouter } from \"next/router\";\nimport SignalDetail from \"../../components/signal/signaldetail\";\nimport axios from \"axios\";\n\nconst signalDetail = props => {\n  const signalData = props.signals;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(SignalDetail, {\n      signalData: signalData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\nconst getData = async () => {\n  const signals = axios.get(`http://127.0.0.2:8000/api/v1/signal`).then(res => res.data.signal);\n  return signals;\n};\n\nexport const getStaticProps = async ctx => {\n  const {\n    params\n  } = ctx;\n  const signalId = params.signalId;\n  const signals = await getData();\n\n  if (!signals) {\n    return {\n      notFound: true\n    };\n  }\n\n  return {\n    props: {\n      signals\n    },\n    revalidate: 60\n  };\n};\nexport const getStaticPaths = async ctx => {\n  const signals = await getData(); //creating id array\n\n  const ids = signals.map(signal => signal._id); //converting ids to the form {params:{signalId:id}}\n\n  const params = ids.map(id => ({\n    params: {\n      signalId: id\n    }\n  })); // paths: {params:{signalId:id}}\n\n  return {\n    paths: params,\n    fallback: \"blocking\"\n  };\n};\nexport default signalDetail;","map":{"version":3,"sources":["C:/Users/mohamadhasan tabrizi/Desktop/capitalnext/pages/signal/[signalId].js"],"names":["useRouter","SignalDetail","axios","signalDetail","props","signalData","signals","getData","get","then","res","data","signal","getStaticProps","ctx","params","signalId","notFound","revalidate","getStaticPaths","ids","map","_id","id","paths","fallback"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAE9B,QAAMC,UAAU,GAAED,KAAK,CAACE,OAAxB;AACA,sBACI;AAAA,2BACE,QAAC,YAAD;AAAc,MAAA,UAAU,EAAED;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF,mBADJ;AAKD,CARD;;AAUA,MAAME,OAAO,GAAG,YAAW;AACzB,QAAMD,OAAO,GAAGJ,KAAK,CAACM,GAAN,CAAW,qCAAX,EACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,MAD1B,CAAhB;AAGA,SAAON,OAAP;AACD,CALD;;AAOA,OAAO,MAAMO,cAAc,GAAG,MAAMC,GAAN,IAAc;AAC1C,QAAM;AAACC,IAAAA;AAAD,MAAWD,GAAjB;AACA,QAAME,QAAQ,GAAGD,MAAM,CAACC,QAAxB;AACA,QAAMV,OAAO,GAAG,MAAMC,OAAO,EAA7B;;AACA,MAAG,CAACD,OAAJ,EAAY;AACV,WAAM;AACJW,MAAAA,QAAQ,EAAC;AADL,KAAN;AAGD;;AACD,SAAM;AACJb,IAAAA,KAAK,EAAC;AACJE,MAAAA;AADI,KADF;AAIJY,IAAAA,UAAU,EAAC;AAJP,GAAN;AAOD,CAhBM;AAiBP,OAAO,MAAMC,cAAc,GAAG,MAAML,GAAN,IAAc;AAC1C,QAAMR,OAAO,GAAG,MAAMC,OAAO,EAA7B,CAD0C,CAE1C;;AACA,QAAMa,GAAG,GAAGd,OAAO,CAACe,GAAR,CAAYT,MAAM,IAAIA,MAAM,CAACU,GAA7B,CAAZ,CAH0C,CAI1C;;AACA,QAAMP,MAAM,GAAGK,GAAG,CAACC,GAAJ,CAASE,EAAD,KAAS;AAACR,IAAAA,MAAM,EAAC;AAACC,MAAAA,QAAQ,EAACO;AAAV;AAAR,GAAT,CAAR,CAAf,CAL0C,CAM1C;;AACA,SAAM;AACJC,IAAAA,KAAK,EAACT,MADF;AAEJU,IAAAA,QAAQ,EAAC;AAFL,GAAN;AAID,CAXM;AAaP,eAAetB,YAAf","sourcesContent":["import {useRouter} from \"next/router\";\r\nimport SignalDetail from \"../../components/signal/signaldetail\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst signalDetail = (props) => {\r\n\r\n  const signalData= props.signals;\r\n  return(\r\n      <>\r\n        <SignalDetail signalData={signalData} />\r\n      </>\r\n  )\r\n}\r\n\r\nconst getData = async() => {\r\n  const signals = axios.get(`http://127.0.0.2:8000/api/v1/signal`)\r\n                      .then(res => res.data.signal);\r\n\r\n  return signals;\r\n}\r\n\r\nexport const getStaticProps = async(ctx) => {\r\n  const {params} = ctx;\r\n  const signalId = params.signalId;\r\n  const signals = await getData();\r\n  if(!signals){\r\n    return{\r\n      notFound:true\r\n    }\r\n  }\r\n  return{\r\n    props:{\r\n      signals\r\n    },\r\n    revalidate:60\r\n    \r\n  }\r\n}\r\nexport const getStaticPaths = async(ctx) => {\r\n  const signals = await getData();\r\n  //creating id array\r\n  const ids = signals.map(signal => signal._id);\r\n  //converting ids to the form {params:{signalId:id}}\r\n  const params = ids.map((id) => ({params:{signalId:id}}));\r\n  // paths: {params:{signalId:id}}\r\n  return{\r\n    paths:params,\r\n    fallback:\"blocking\"\r\n  }\r\n}\r\n\r\nexport default signalDetail;"]},"metadata":{},"sourceType":"module"}