{"ast":null,"code":"import _defineProperty from \"C:/Users/mohamadhasan tabrizi/Desktop/capitalnext/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"C:/Users/mohamadhasan tabrizi/Desktop/capitalnext/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/mohamadhasan tabrizi/Desktop/capitalnext/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/mohamadhasan tabrizi/Desktop/capitalnext/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/mohamadhasan tabrizi/Desktop/capitalnext/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/mohamadhasan tabrizi/Desktop/capitalnext/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\mohamadhasan tabrizi\\\\Desktop\\\\capitalnext\\\\components\\\\dailyproperty\\\\dailypropertychart.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// STEP 1 - Include Dependencies\n// Include react\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"; // Include the react-fusioncharts component\n\nimport ReactFC from \"react-fusioncharts\"; // Include the fusioncharts library\n\nimport FusionCharts from \"fusioncharts\"; // Include the chart type\n\nimport Column2D from \"fusioncharts/fusioncharts.charts\"; // Include the theme as fusion\n\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\"; // Adding the chart and theme as dependency to the core fusioncharts\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme); // STEP 2 - Chart Data\n\nvar chartData = [{\n  label: \"Venezuela\",\n  value: \"290\"\n}, {\n  label: \"Saudi\",\n  value: \"260\"\n}, {\n  label: \"Canada\",\n  value: \"180\"\n}, {\n  label: \"Iran\",\n  value: \"140\"\n}, {\n  label: \"Russia\",\n  value: \"115\"\n}, {\n  label: \"UAE\",\n  value: \"100\"\n}, {\n  label: \"US\",\n  value: \"30\"\n}, {\n  label: \"China\",\n  value: \"30\"\n}]; // STEP 3 - Creating the JSON object to store the chart configurations\n\nvar chartConfigs = {\n  type: \"column2d\",\n  // The chart type\n  width: \"700\",\n  // Width of the chart\n  height: \"400\",\n  // Height of the chart\n  dataFormat: \"json\",\n  // Data type\n  dataSource: {\n    // Chart Configuration\n    chart: {\n      //Set the chart caption\n      caption: \"Countries With Most Oil Reserves [2017-18]\",\n      //Set the chart subcaption\n      subCaption: \"In MMbbl = One Million barrels\",\n      //Set the x-axis name\n      xAxisName: \"Country\",\n      //Set the y-axis name\n      yAxisName: \"Reserves (MMbbl)\",\n      numberSuffix: \"K\",\n      //Set the theme for your chart\n      theme: \"fusion\"\n    },\n    // Chart Data\n    data: chartData\n  }\n}; // STEP 4 - Creating the DOM element to pass the react-fusioncharts component\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(ReactFC, _objectSpread({}, chartConfigs), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 12\n      }, this);\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mohamadhasan tabrizi/Desktop/capitalnext/components/dailyproperty/dailypropertychart.js"],"names":["React","ReactDOM","ReactFC","FusionCharts","Column2D","FusionTheme","fcRoot","chartData","label","value","chartConfigs","type","width","height","dataFormat","dataSource","chart","caption","subCaption","xAxisName","yAxisName","numberSuffix","theme","data","App","Component"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,oBAApB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,cAAzB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,kCAArB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,+CAAxB,C,CAEA;;AACAH,OAAO,CAACI,MAAR,CAAeH,YAAf,EAA6BC,QAA7B,EAAuCC,WAAvC,E,CAEA;;AACA,IAAME,SAAS,GAAG,CAChB;AACEC,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CADgB,EAKhB;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CALgB,EAShB;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CATgB,EAahB;AACED,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAbgB,EAiBhB;AACED,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAjBgB,EAqBhB;AACED,EAAAA,KAAK,EAAE,KADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CArBgB,EAyBhB;AACED,EAAAA,KAAK,EAAE,IADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CAzBgB,EA6BhB;AACED,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CA7BgB,CAAlB,C,CAmCA;;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,UADa;AACD;AAClBC,EAAAA,KAAK,EAAE,KAFY;AAEL;AACdC,EAAAA,MAAM,EAAE,KAHW;AAGJ;AACfC,EAAAA,UAAU,EAAE,MAJO;AAIC;AACpBC,EAAAA,UAAU,EAAE;AACV;AACAC,IAAAA,KAAK,EAAE;AACL;AACAC,MAAAA,OAAO,EAAE,4CAFJ;AAGL;AACAC,MAAAA,UAAU,EAAE,gCAJP;AAKL;AACAC,MAAAA,SAAS,EAAE,SANN;AAOL;AACAC,MAAAA,SAAS,EAAE,kBARN;AASLC,MAAAA,YAAY,EAAE,GATT;AAUL;AACAC,MAAAA,KAAK,EAAE;AAXF,KAFG;AAeV;AACAC,IAAAA,IAAI,EAAEhB;AAhBI;AALO,CAArB,C,CAyBA;;IACMiB,G;;;;;;;;;;;;;6BACK;AACP,0BAAO,QAAC,OAAD,oBAAad,YAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;;;EAHeV,KAAK,CAACyB,S;;AAMxB,eAAeD,GAAf","sourcesContent":["// STEP 1 - Include Dependencies\r\n// Include react\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// Include the react-fusioncharts component\r\nimport ReactFC from \"react-fusioncharts\";\r\n\r\n// Include the fusioncharts library\r\nimport FusionCharts from \"fusioncharts\";\r\n\r\n// Include the chart type\r\nimport Column2D from \"fusioncharts/fusioncharts.charts\";\r\n\r\n// Include the theme as fusion\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\n\r\n// Adding the chart and theme as dependency to the core fusioncharts\r\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\r\n\r\n// STEP 2 - Chart Data\r\nconst chartData = [\r\n  {\r\n    label: \"Venezuela\",\r\n    value: \"290\",\r\n  },\r\n  {\r\n    label: \"Saudi\",\r\n    value: \"260\",\r\n  },\r\n  {\r\n    label: \"Canada\",\r\n    value: \"180\",\r\n  },\r\n  {\r\n    label: \"Iran\",\r\n    value: \"140\",\r\n  },\r\n  {\r\n    label: \"Russia\",\r\n    value: \"115\",\r\n  },\r\n  {\r\n    label: \"UAE\",\r\n    value: \"100\",\r\n  },\r\n  {\r\n    label: \"US\",\r\n    value: \"30\",\r\n  },\r\n  {\r\n    label: \"China\",\r\n    value: \"30\",\r\n  },\r\n];\r\n\r\n// STEP 3 - Creating the JSON object to store the chart configurations\r\nconst chartConfigs = {\r\n  type: \"column2d\", // The chart type\r\n  width: \"700\", // Width of the chart\r\n  height: \"400\", // Height of the chart\r\n  dataFormat: \"json\", // Data type\r\n  dataSource: {\r\n    // Chart Configuration\r\n    chart: {\r\n      //Set the chart caption\r\n      caption: \"Countries With Most Oil Reserves [2017-18]\",\r\n      //Set the chart subcaption\r\n      subCaption: \"In MMbbl = One Million barrels\",\r\n      //Set the x-axis name\r\n      xAxisName: \"Country\",\r\n      //Set the y-axis name\r\n      yAxisName: \"Reserves (MMbbl)\",\r\n      numberSuffix: \"K\",\r\n      //Set the theme for your chart\r\n      theme: \"fusion\",\r\n    },\r\n    // Chart Data\r\n    data: chartData,\r\n  },\r\n};\r\n\r\n// STEP 4 - Creating the DOM element to pass the react-fusioncharts component\r\nclass App extends React.Component {\r\n  render() {\r\n    return <ReactFC {...chartConfigs} />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}